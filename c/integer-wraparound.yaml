rules:
  - id: raptor-integer-wraparound
    metadata:
      author: Marco Ivaldi <raptor@0xdeadbeef.info>
      references:
        - https://cwe.mitre.org/data/definitions/190
      confidence: MEDIUM
    message: >-
      The software performs a calculation that can produce an integer
      overflow or wraparound, when the logic assumes that the resulting
      value will always be larger than the original value. This can
      introduce other weaknesses when the calculation is used for resource
      management or execution control.
      An integer overflow or wraparound occurs when an integer value is
      incremented to a value that is too large to store in the associated
      representation. When this occurs, the value may wrap to become a very
      small or negative number. While this may be intended behavior in
      circumstances that rely on wrapping, it can have security
      consequences if the wrap is unexpected. This is especially the case
      if the integer overflow can be triggered using user-supplied inputs.
      This becomes security-critical when the result is used to control
      looping, make a security decision, or determine the offset or size in
      behaviors such as memory allocation, copying, concatenation, etc.
    severity: WARNING
    languages:
      - c
      - cpp
    pattern-either:
      # malloc, valloc
      - patterns:
        - pattern: $FUN($X * $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: malloc
              - pattern: valloc
      # calloc, realloc, reallocf, aligned_alloc
      - patterns:
        - pattern: $FUN($ARG1, $X * $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: calloc
              - pattern: realloc
              - pattern: reallocf
              - pattern: aligned_alloc
