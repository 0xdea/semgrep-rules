rules:
  - id: raptor-integer-wraparound
    metadata:
      author: Marco Ivaldi <raptor@0xdeadbeef.info>
      references:
        - https://cwe.mitre.org/data/definitions/190
        - https://cwe.mitre.org/data/definitions/128
        - https://cwe.mitre.org/data/definitions/131
        - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
        - http://www.phrack.org/issues/60/10.html#article
        - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
        - https://dustri.org/b/playing-with-weggli.html
      confidence: LOW
      # NOTE: only multiplication and sum with two operands are covered; other 
      # arithmetic operations should also be considered, as well as any operation 
      # with more than two operands.
      # NOTE: some allocation functions such as kmalloc() or custom functions are 
      # not covered; in addition, functions such as calloc() can cause a wraparound
      # based on their first argument that specifies the number of elements.
    message: >-
      The software performs a calculation that can produce an integer
      overflow or wraparound, when the logic assumes that the resulting
      value will always be larger than the original value. This can
      introduce other weaknesses when the calculation is used for resource
      management or execution control.
    severity: WARNING
    languages:
      - c
      - cpp
    pattern-either:
      # malloc, valloc (multiplication)
      - patterns:
        - pattern: $FUN($X * $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: malloc
              - pattern: valloc
      - patterns:
        - pattern: $FUN($N)
        - pattern-inside: |
            $N = $X * $Y;
            ...
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: malloc
              - pattern: valloc
      # malloc, valloc (sum)
      - patterns:
        - pattern: $FUN($X + $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: malloc
              - pattern: valloc
      - patterns:
        - pattern: $FUN($N)
        - pattern-inside: |
            $N = $X + $Y;
            ...
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: malloc
              - pattern: valloc
      # calloc, realloc, reallocf, aligned_alloc (multiplication)
      - patterns:
        - pattern: $FUN($ARG1, $X * $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: calloc
              - pattern: realloc
              - pattern: reallocf
              - pattern: aligned_alloc
      - patterns:
        - pattern: $FUN($ARG1, $N)
        - pattern-inside: |
            $N = $X * $Y;
            ...
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: calloc
              - pattern: realloc
              - pattern: reallocf
              - pattern: aligned_alloc
      # calloc, realloc, reallocf, aligned_alloc (sum)
      - patterns:
        - pattern: $FUN($ARG1, $X + $Y)
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: calloc
              - pattern: realloc
              - pattern: reallocf
              - pattern: aligned_alloc
      - patterns:
        - pattern: $FUN($ARG1, $N)
        - pattern-inside: |
            $N = $X + $Y;
            ...
        - metavariable-pattern:
            metavariable: $FUN
            pattern-either:
              - pattern: calloc
              - pattern: realloc
              - pattern: reallocf
              - pattern: aligned_alloc
