rules:
  - id: raptor-use-after-free
    metadata:
      author: Marco Ivaldi <raptor@0xdeadbeef.info>
      references:
        - https://cwe.mitre.org/data/definitions/416
        - https://github.com/struct/mms
        - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
        - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
      confidence: MEDIUM
      # NOTE: C++ delete and delete[] operators are not covered.
      # NOTE: realloc() is not covered.
    message: >-
      Referencing memory after it has been freed can cause a program to
      crash, use unexpected values, or execute code.
      The use of previously-freed memory can have any number of adverse
      consequences, ranging from the corruption of valid data to the
      execution of arbitrary code, depending on the instantiation and
      timing of the flaw. The simplest way data corruption may occur
      involves the system's reuse of the freed memory.
      In this scenario, the memory in question is allocated to another
      pointer validly at some point after it has been freed. The original
      pointer to the freed memory is used again and points to somewhere
      within the new allocation. As the data is changed, it corrupts the
      validly used memory; this induces undefined behavior in the process.
    severity: ERROR
    languages:
      - c
      - cpp
    pattern-either:
      # function call
      - patterns:
        - pattern: |
            free($PTR);
            ...
            $FUN(..., $PTR, ...);
        - pattern-not: |
            free($PTR);
            ...
            $PTR = $EXPR;
            ...
            $FUN(..., $PTR, ...);
        # filter out double free() instances
        - metavariable-pattern:
            metavariable: $FUN
            patterns:
              - pattern-not: free
      # function call with struct member pointer
      - patterns:
        - pattern: |
            free($PTR);
            ...
            $FUN(..., $PTR->$MEM, ...);
        - pattern-not: |
            free($PTR);
            ...
            $PTR = $EXPR;
            ...
            $FUN(..., $PTR->$MEM, ...);
      # struct member function pointer
      - patterns:
        - pattern: |
            free($PTR);
            ...
            $PTR->$FUN(...);
        - pattern-not: |
            free($PTR);
            ...
            $PTR = $EXPR;
            ...
            $PTR->$FUN(...);
      # return pointer
      - patterns:
        - pattern: |
            free($PTR);
            ...
            return $PTR;
        - pattern-not: |
            free($PTR);
            ...
            $PTR = $EXPR;
            ...
            return $PTR;
      # return array pointer
      - patterns:
        - pattern: |
            free($PTR);
            ...
            return $PTR[$POS];
        - pattern-not: |
            free($PTR);
            ...
            $PTR = $EXPR;
            ...
            return $PTR;
